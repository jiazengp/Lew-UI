// 此文件由 extract-types.js 自动生成，请勿手动修改

export default {
  "LewThemeColor": `export type LewThemeColor\n  = | 'black'\n    | 'blue'\n    | 'brown'\n    | 'cyan'\n    | 'gray'\n    | 'green'\n    | 'indigo'\n    | 'mint'\n    | 'orange'\n    | 'pink'\n    | 'purple'\n    | 'red'\n    | 'teal'\n    | 'yellow'`,
  "LewStatusColor": `export type LewStatusColor\n  = | 'error'\n    | 'success'\n    | 'warning'\n    | 'info'\n    | 'normal'\n    | 'primary'\n    | 'danger'`,
  "LewColor": `export type LewColor = LewThemeColor | LewStatusColor`,
  "LewSize": `export type LewSize = 'small' | 'medium' | 'large'`,
  "LewDirection": `export type LewDirection = 'x' | 'y'`,
  "LewComponentSource": `export type LewComponentSource\n  = | string\n    | number\n    | boolean\n    | VNode\n    | Component\n    | ((...args: any[]) => any)\n    | Promise<Component>\n    | Record<string, any>\n    | null\n    | undefined`,
  "LewXAlignment": `export type LewXAlignment = 'start' | 'center' | 'end' | 'left' | 'right'`,
  "LewYAlignment": `export type LewYAlignment = 'start' | 'center' | 'end' | 'top' | 'bottom'`,
  "LewStatus": `export type LewStatus = 'pending' | 'loading' | 'done' | 'error' | 'warning'`,
  "LewTrigger": `export type LewTrigger = 'hover' | 'click' | 'mouseenter'`,
  "LewPlacement": `export type LewPlacement\n  = | 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'`,
  "LewOffset": `export type LewOffset = [number, number]`,
  "LewButtonType": `export type LewButtonType = 'fill' | 'light' | 'ghost' | 'text'`,
  "LewButtonSize": `export type LewButtonSize = 'mini' | 'small' | 'medium' | 'large'`,
  "LewTagType": `export type LewTagType = 'fill' | 'light' | 'ghost'`,
  "LewAvatarPlacement": `export type LewAvatarPlacement = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'`,
  "LewAvatarStatus": `export type LewAvatarStatus = 'online' | 'processing' | 'away' | 'offline' | 'busy'`,
  "LewAvatarShape": `export type LewAvatarShape = 'circle' | 'square' | 'sharp'`,
  "LewImageObjectFit": `export type LewImageObjectFit = 'fill' | 'contain' | 'cover' | 'none' | 'scale-down'`,
  "LewImageObjectPosition": `export type LewImageObjectPosition = 'center' | 'top' | 'bottom' | 'left' | 'right' | 'top left' | 'top right' | 'bottom left' | 'bottom right'`,
  "LewInputType": `export type LewInputType = 'text' | 'password'`,
  "LewInputPrefixesType": `export type LewInputPrefixesType = 'icon' | 'select' | 'text'`,
  "LewInputSuffixType": `export type LewInputSuffixType = 'icon' | 'select' | 'text'`,
  "LewTextareaResize": `export type LewTextareaResize = 'none' | 'both' | 'horizontal' | 'vertical'`,
  "LewTabsType": `export type LewTabsType = 'block' | 'line'`,
  "LewBreadcrumbSeparator": `export type LewBreadcrumbSeparator = 'shoulder' | 'sprit'`,
  "LewUploadStatus": `export type LewUploadStatus = 'success' | 'fail' | 'uploading' | 'complete' | 'wrong_type' | 'wrong_size' | 'pending'`,
  "LewFormItemAs": `export type LewFormItemAs = 'input' | 'textarea' | 'input-tag' | 'checkbox-group' | 'radio-group' | 'checkbox' | 'select' | 'select-multiple' | 'date-picker' | 'date-range-picker' | 'tabs' | 'cascader' | 'switch' | 'button' | 'upload' | 'input-number' | 'slider' | 'slider-range' | 'color-picker' | 'rate' | 'tree-select'`,
  "LewSelectMultipleValueLayout": `export type LewSelectMultipleValueLayout = 'tag' | 'text'`,
  "LewStepsStatus": `export type LewStepsStatus = 'pending' | 'loading' | 'done' | 'error' | 'warning'`,
  "LewEmptyType": `export type LewEmptyType = '404' | 'address' | 'article' | 'goods' | 'likes' | 'car' | 'comment' | 'network' | 'order' | 'search'`,
  "LewPopokType": `export type LewPopokType = 'error' | 'warning' | 'success' | 'info' | 'normal'`,
  "LewDrawerPosition": `export type LewDrawerPosition = 'left' | 'right' | 'top' | 'bottom'`,
  "LewActionBoxOption": `export interface LewActionBoxOption {\n  label: LewComponentSource\n  icon?: LewComponentSource\n  customRender?: LewComponentSource\n  onClick?: (event?: MouseEvent) => void\n}`,
  "LewBreadcrumbOption": `export interface LewBreadcrumbOption {\n  label: string\n  value?: string\n  active?: boolean\n}`,
  "LewStepsOption": `export interface LewStepsOption {\n  title: LewComponentSource\n  description?: LewComponentSource\n}`,
  "LewTabsOption": `export interface LewTabsOption {\n  label: string\n  value: string\n  disabled?: boolean\n}`,
  "LewMenuOption": `export interface LewMenuOption {\n  label: string\n  value?: string\n  icon?: LewComponentSource\n  disabled?: boolean\n  children?: LewMenuOption[]\n  tagProps?: LewTagProps\n}`,
  "LewMenuTreeOption": `export interface LewMenuTreeOption {\n  label: LewComponentSource\n  value: string\n  icon?: LewComponentSource\n  active?: boolean\n  disabled?: boolean\n  children?: LewMenuTreeOption[]\n  tagProps?: LewTagProps\n}`,
  "LewContextMenusOption": `export interface LewContextMenusOption {\n  label?: LewComponentSource\n  value?: string\n  icon?: LewComponentSource\n  disabled?: boolean\n  checkable?: boolean\n  checked?: boolean\n  isDividerLine?: boolean\n  level?: number\n  children?: LewContextMenusOption[]\n  onClick?: (item: LewContextMenusOption) => void\n  [key: string]: any\n}`,
  "LewHoverMenusOption": `export interface LewHoverMenusOption {\n  label?: LewComponentSource\n  value?: string\n  type?: string\n  icon?: LewComponentSource\n  disabled?: boolean\n  isDividerLine?: boolean\n  level?: number\n  children?: LewHoverMenusOption[]\n  onClick?: (item: LewHoverMenusOption) => void\n  [key: string]: any\n}`,
  "LewInputTableColumn": `export interface LewInputTableColumn {\n  title: string\n  width?: number\n  field: string\n  as: string\n}`,
  "LewTableColumn": `export interface LewTableColumn {\n  title: string\n  field: string\n  fixed?: 'left' | 'right'\n  width?: number\n  x?: string\n  y?: string\n  columnStyle?: string\n  sortable?: boolean\n}`,
  "LewDescOption": `export interface LewDescOption {\n  label: string\n  field: string\n  direction?: LewDirection\n  size?: LewSize\n  width?: string\n  labelWidth?: string\n  tips?: string\n  type?: 'text-trim'\n  gridArea?: string\n  labelX?: Property.TextAlign\n  valueX?: Property.TextAlign\n  customRender?: (params: { field: string, label: string, dataSource: Record<string, any> }) => any\n}`,
  "LewSelectOption": `export interface LewSelectOption {\n  label: string\n  value: string\n  disabled?: boolean\n  isGroup?: boolean\n  groupValue?: string\n  groupLabel?: string\n}`,
  "LewTreeSelectOption": `export interface LewTreeSelectOption {\n  label: string\n  value: string\n  level: number\n  labelPaths?: string[]\n  keysPaths?: string[]\n  isLeaf?: boolean\n  loading?: boolean\n  disabled?: boolean\n  parentLabelPaths?: string[]\n  parentKeysPaths?: string[]\n  parentChildren?: LewTreeSelectOption[]\n  children?: LewTreeSelectOption[]\n}`,
  "LewSelectMultipleOption": `export interface LewSelectMultipleOption {\n  label: string\n  value: string\n  disabled?: boolean\n  isGroup?: boolean\n  groupValue?: string\n  groupLabel?: string\n}`,
  "LewCheckboxOption": `export interface LewCheckboxOption {\n  label: string\n  value: string\n  disabled?: boolean\n}`,
  "LewRadioOption": `export interface LewRadioOption {\n  label: string\n  value: string\n  disabled?: boolean\n}`,
  "LewSliderOption": `export interface LewSliderOption {\n  label: string\n  value: number\n}`,
  "LewSliderRangeOption": `export interface LewSliderRangeOption {\n  label: string\n  value: number\n}`,
  "LewDatePickerPresetsOption": `export interface LewDatePickerPresetsOption {\n  label: string\n  value: string\n}`,
  "LewCascaderOption": `export interface LewCascaderOption {\n  label: string\n  value: string\n  level?: number\n  labelPaths?: string[]\n  valuePaths?: string[]\n  isLeaf?: boolean\n  loading?: boolean\n  disabled?: boolean\n  parentLabelPaths?: string[]\n  parentValuePaths?: string[]\n  children?: LewCascaderOption[]\n}`,
  "LewTreeDataSource": `export interface LewTreeDataSource {\n  label: string\n  key: string\n  level: number\n  isLeaf?: boolean\n  loading?: boolean\n  disabled?: boolean\n  parentKey?: string\n  treeIndex?: number\n  labelPaths?: string[]\n  valueKeys?: string[]\n  parentKeyPaths?: string[]\n  parentLabelPaths?: string[]\n  allNodeValues: string[]\n  leafNodeValues: string[]\n  children?: LewTreeDataSource[]\n}`,
  "LewUploadFileItem": `export interface LewUploadFileItem {\n  key: string\n  name?: string\n  url?: string\n  status?: LewUploadStatus\n  percent?: number\n  file?: File\n  size?: number\n  type?: string\n  lastModifiedDate?: string\n  lastModified?: number\n}`,
  "LewSelectSearchMethodParams": `export interface LewSelectSearchMethodParams {\n  options?: LewSelectOption[]\n  keyword?: string\n}`,
  "LewTreeSelectSearchMethodParams": `export interface LewTreeSelectSearchMethodParams {\n  item?: LewTreeDataSource\n  keyword?: string\n}`,
  "LewSelectSearchMultipleMethodParams": `export interface LewSelectSearchMultipleMethodParams {\n  options?: LewSelectMultipleOption[]\n  keyword?: string\n}`,
  "LewFormOption": `export interface LewFormOption {\n  label?: string\n  field: string\n  required?: boolean\n  as?: LewFormItemAs | ''\n  size?: LewSize\n  width?: Property.Width\n  labelWidth?: Property.Width\n  direction?: LewDirection\n  disabled?: boolean\n  readonly?: boolean\n  tips?: string\n  errMessage?: string\n  rule?: any | string\n  props?: Record<string, any>\n  between?: boolean\n  gridArea?: string\n  id?: string\n  outputFormat?: (params: { value: unknown, item?: LewFormOption }) => unknown\n  inputFormat?: (params: { value: unknown, item?: LewFormOption }) => unknown\n}`,
  "LewTooltipDirectiveBinding": `export interface LewTooltipDirectiveBinding {\n  trigger?: LewTrigger\n  content?: any\n  placement?: LewPlacement\n  delay?: number | [number, number]\n  triggerFrom?: string\n}`,
  "LewLoadingDirectiveBinding": `export interface LewLoadingDirectiveBinding {\n  tip?: string\n  iconSize?: number\n  visible?: boolean\n}`,
  "LewBackTopDirectiveBinding": `export interface LewBackTopDirectiveBinding {\n  target?: string\n}`,
  "LewContextMenuDirectiveBinding": `export interface LewContextMenuDirectiveBinding {\n  options?: LewContextMenusOption[]\n  disabled?: boolean\n}`,
  "LewHoverMenuDirectiveBinding": `export interface LewHoverMenuDirectiveBinding {\n  options?: LewHoverMenusOption[]\n  disabled?: boolean\n}`,
  "LewDirectiveBindings": `export interface LewDirectiveBindings {\n  'tooltip': LewTooltipDirectiveBinding\n  'loading': LewLoadingDirectiveBinding\n  'backtop': LewBackTopDirectiveBinding\n  'context-menu': LewContextMenuDirectiveBinding\n  'hover-menu': LewHoverMenuDirectiveBinding\n}`,
  "LewDialogType": `export type LewDialogType = 'warning' | 'error' | 'info' | 'normal' | 'success'`,
  "LewMessageType": `export type LewMessageType = 'warning' | 'error' | 'info' | 'normal' | 'success' | 'loading'`,
  "LewNotificationType": `export type LewNotificationType = 'warning' | 'info' | 'normal' | 'success' | 'error'`,
  "LewDialogOptions": `export interface LewDialogOptions {\n  type?: LewDialogType\n  icon?: LewComponentSource\n  title?: LewComponentSource\n  content?: LewComponentSource\n  hideIcon?: boolean\n  ok?: () => Promise<boolean>\n  cancel?: () => Promise<boolean>\n  okText?: string\n  cancelText?: string\n  closeOnClickOverlay?: boolean\n  closeByEsc?: boolean\n}`,
  "LewDialogMethod": `export interface LewDialogMethod {\n  (options: LewDialogOptions): void\n}`,
  "LewDialogInstance": `export interface LewDialogInstance {\n  name: string\n  warning: LewDialogMethod\n  error: LewDialogMethod\n  info: LewDialogMethod\n  normal: LewDialogMethod\n  success: LewDialogMethod\n}`,
  "LewMessageOptions": `export interface LewMessageOptions {\n  id?: string\n  content: string\n  duration?: number\n  onClose?: () => void\n}`,
  "LewMessageRequestOptions": `export interface LewMessageRequestOptions {\n  loadingMessage: string\n}`,
  "LewMessageRequestResult": `export interface LewMessageRequestResult {\n  content?: string\n  duration?: number\n  type?: string\n}`,
  "LewMessageRequestErrorResult": `export interface LewMessageRequestErrorResult {\n  content?: string\n  duration?: number\n}`,
  "LewMessageMethod": `export interface LewMessageMethod {\n  (content: string | LewMessageOptions): void\n}`,
  "LewMessageCloseMethod": `export interface LewMessageCloseMethod {\n  (options: { id: string }): void\n}`,
  "LewMessageRequestMethod": `export interface LewMessageRequestMethod {\n  (\n    options: LewMessageRequestOptions,\n    asyncFn: () => Promise<LewMessageRequestResult>\n  ): Promise<void>\n}`,
  "LewMessageInstance": `export interface LewMessageInstance {\n  name: string\n  timer: Record<string, NodeJS.Timeout>\n  warning: LewMessageMethod\n  error: LewMessageMethod\n  info: LewMessageMethod\n  normal: LewMessageMethod\n  success: LewMessageMethod\n  loading: LewMessageMethod\n  close: LewMessageCloseMethod\n  request: LewMessageRequestMethod\n  message: (options: { type: string, e: LewMessageOptions }) => void\n  [key: string]: any // 添加索引签名以支持动态访问方法\n}`,
  "LewNotificationOptions": `export interface LewNotificationOptions {\n  title: string\n  content: string\n  duration?: number\n  showProgress?: boolean\n  width?: number | string\n}`,
  "LewNotificationResult": `export interface LewNotificationResult {\n  close: () => void\n}`,
  "LewNotificationMethod": `export interface LewNotificationMethod {\n  (options: LewNotificationOptions): LewNotificationResult\n}`,
  "LewNotificationInstance": `export interface LewNotificationInstance {\n  name: string\n  warning: LewNotificationMethod\n  info: LewNotificationMethod\n  normal: LewNotificationMethod\n  success: LewNotificationMethod\n  error: LewNotificationMethod\n}`,
  "LewCollapseModelValue": `export type LewCollapseModelValue = (string | number)[] | string | number | null`,
}
